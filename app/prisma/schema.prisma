generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/gist_list/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Gist List Tables
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  fullName      String?
  subscriptionTier String @default("FREE") // FREE, BASIC, PRO
  listingCount  Int       @default(0)
  premiumPostsUsed Int    @default(0)
  premiumPostsTotal Int   @default(4) // Free users get 4 premium posts
  stripeCustomerId String?
  emailVerified DateTime?
  image         String?
  
  // Saved Preferences (auto-fill for new listings)
  defaultFulfillmentType String? @default("shipping") // "shipping" or "local"
  defaultWillingToShip   Boolean @default(true)
  defaultOkForLocals     Boolean @default(false)
  defaultLocation        String? // for local sales
  defaultMeetupPreference String? // delivery/meetup preference
  defaultWeight          Float?  // typical shipping weight
  defaultDimensions      String? // typical dimensions
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  listings      Listing[]
  chips         UserChip[]
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String
  stripeSubscriptionId String @unique
  stripePriceId     String
  status            String   // active, canceled, past_due
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id                String   @id @default(cuid())
  userId            String
  status            String   @default("DRAFT") // DRAFT, ACTIVE, POSTED, ARCHIVED
  
  // Core fields
  title             String?
  description       String?  @db.Text
  theGist           String?  @db.Text
  price             Float?
  condition         String?
  conditionNotes    String?  @db.Text
  
  // Item Details
  brand             String?
  model             String?
  year              String?
  color             String?
  material          String?
  size              String?
  specs             String?  @db.Text
  
  // Image Quality
  imageQualityIssue String?  @db.Text
  
  // AI Analysis
  itemIdentified    Boolean  @default(false)
  confidence        Float?
  category          String?
  tags              String[] // array of tags
  searchTags        String[] // SEO-optimized search tags (up to 20)
  alternativeItems  String?  @db.Text // JSON array of alternative item identifications AI considered
  
  // Market Research
  avgMarketPrice    Float?   // DEPRECATED - kept for backwards compatibility
  suggestedPriceMin Float?   // DEPRECATED
  suggestedPriceMax Float?   // DEPRECATED
  brandNewPrice     Float?   // Resale price for brand new sealed items
  priceRangeHigh    Float?   // High average for Very Good condition
  priceRangeMid     Float?   // Median average for Good condition
  priceRangeLow     Float?   // Low average for Fair/Poor condition
  priceForParts     Float?   // Fixed average for For Parts condition
  bestPostTime      String?
  marketInsights    String?  @db.Text
  
  // Shipping & Local
  fulfillmentType   String?  @default("shipping") // "shipping" or "local"
  willingToShip     Boolean  @default(true)
  okForLocals       Boolean  @default(false) // if shipping, can locals also contact
  weight            Float?
  dimensions        String?  // "LxWxH"
  shippingCostEst   Float?
  location          String?  // for local sales
  meetupPreference  String?  // delivery/meetup preference
  
  // Premium Features
  usePremium        Boolean  @default(false) // User checked premium checkbox
  premiumFacts      String?  @db.Text // Premium/special facts AI went extra mile to provide
  usefulLinks       String?  @db.Text // JSON array of useful links (manuals, businesses, parts, services)
  
  // Platform recommendations
  recommendedPlatforms String[] // top 2-3 platforms
  qualifiedPlatforms   String[] // all qualifying platforms
  
  // AI Learning
  editedFields      String[] // Track which fields user edited for AI learning
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  postedAt          DateTime?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos            Photo[]
  platformData      PlatformData[]
  notifications     AINotification[]
}

model Photo {
  id                String   @id @default(cuid())
  listingId         String
  cloudStoragePath  String   // S3 key
  cdnUrl            String?  // CDN URL for fast access
  order             Int      @default(0)
  isPrimary         Boolean  @default(false)
  createdAt         DateTime @default(now())
  
  listing           Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model PlatformData {
  id                String   @id @default(cuid())
  listingId         String
  platform          String   // eBay, Mercari, OfferUp, etc.
  
  // Platform-specific fields stored as JSON
  customFields      String   @db.Text // JSON string
  
  // Export tracking
  exported          Boolean  @default(false)
  exportedAt        DateTime?
  posted            Boolean  @default(false)
  postedAt          DateTime?
  platformListingId String?  // ID from the platform after posting
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  listing           Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@unique([listingId, platform])
}

model AINotification {
  id          String   @id @default(cuid())
  listingId   String
  type        String   // "ALERT" (required fields - red) or "QUESTION" (actionable insights - blue)
  message     String   @db.Text
  field       String?  // which field this relates to (for ALERTs - jumps to that field)
  actionType  String?  // "retake_photo", "add_photo", "inoperable_check", "question", "insight"
  actionData  String?  @db.Text // JSON data for action (e.g., photo index for retake)
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model UserChip {
  id          String   @id @default(cuid())
  userId      String
  category    String   // "missing", "comes_with", "condition_details", "functional", etc.
  text        String   // The chip text (e.g., "Power Supply", "Manual", "Minor Scratches")
  itemCategory String? // Item category this chip is relevant to (e.g., "electronics", "clothing", null for all)
  useCount    Int      @default(1) // Track how often user uses this chip
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, category, text, itemCategory])
  @@index([userId, category, itemCategory])
}
