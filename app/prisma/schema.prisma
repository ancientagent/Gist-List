generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/gist_list/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth Tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Gist List Tables
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  fullName      String?
  subscriptionTier String @default("FREE") // FREE, BASIC, PRO
  listingCount  Int       @default(0)
  stripeCustomerId String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  listings      Listing[]
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String
  stripeSubscriptionId String @unique
  stripePriceId     String
  status            String   // active, canceled, past_due
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id                String   @id @default(cuid())
  userId            String
  status            String   @default("DRAFT") // DRAFT, ACTIVE, POSTED, ARCHIVED
  
  // Core fields
  title             String?
  description       String?  @db.Text
  theGist           String?  @db.Text
  price             Float?
  condition         String?
  conditionNotes    String?  @db.Text
  
  // Item Details
  brand             String?
  model             String?
  year              String?
  color             String?
  material          String?
  size              String?
  specs             String?  @db.Text
  
  // Image Quality
  imageQualityIssue String?  @db.Text
  
  // AI Analysis
  itemIdentified    Boolean  @default(false)
  confidence        Float?
  category          String?
  tags              String[] // array of tags
  
  // Market Research
  avgMarketPrice    Float?
  suggestedPriceMin Float?
  suggestedPriceMax Float?
  bestPostTime      String?
  marketInsights    String?  @db.Text
  
  // Shipping & Local
  fulfillmentType   String?  @default("shipping") // "shipping" or "local"
  willingToShip     Boolean  @default(true)
  okForLocals       Boolean  @default(false) // if shipping, can locals also contact
  weight            Float?
  dimensions        String?  // "LxWxH"
  shippingCostEst   Float?
  location          String?  // for local sales
  meetupPreference  String?  // delivery/meetup preference
  
  // Pro Features
  buyerInfoPackage  String?  @db.Text // JSON string with manuals, specs, dealers, etc.
  
  // Platform recommendations
  recommendedPlatforms String[] // top 2-3 platforms
  qualifiedPlatforms   String[] // all qualifying platforms
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  postedAt          DateTime?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos            Photo[]
  platformData      PlatformData[]
  notifications     AINotification[]
}

model Photo {
  id                String   @id @default(cuid())
  listingId         String
  cloudStoragePath  String   // S3 key
  cdnUrl            String?  // CDN URL for fast access
  order             Int      @default(0)
  isPrimary         Boolean  @default(false)
  createdAt         DateTime @default(now())
  
  listing           Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model PlatformData {
  id                String   @id @default(cuid())
  listingId         String
  platform          String   // eBay, Mercari, OfferUp, etc.
  
  // Platform-specific fields stored as JSON
  customFields      String   @db.Text // JSON string
  
  // Export tracking
  exported          Boolean  @default(false)
  exportedAt        DateTime?
  posted            Boolean  @default(false)
  postedAt          DateTime?
  platformListingId String?  // ID from the platform after posting
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  listing           Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  @@unique([listingId, platform])
}

model AINotification {
  id          String   @id @default(cuid())
  listingId   String
  type        String   // "ALERT" (red !) or "PREFERENCE" (blue ?)
  message     String   @db.Text
  field       String?  // which field this relates to
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
